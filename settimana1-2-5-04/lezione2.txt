lezione giovedì 4/4 



// Quali sono i dati in JAVA?
		// Abbiamo 2 tipi di dati: quelli primitivi e quelli di riferimento (o oggetti).
		// DATI PRIMITIVI:
		// byte - è un dato di tipo numerico intero, occupa 1 byte di memoria e va da -128 a 127
		// short - è un dato di tipo numerico intero, occupa 2 byte di memoria e va da -32768 a 32767
		// int - è un dato di tipo numerico intero, occupa 4 byte di memoria e va da -2147483648 a 2147483647
		// long - è un dato di tipo numerico intero, occupa 8 byte di memoria e va da -9223372036854775808 a 9223372036854775807
		
		
		// double - è un dato di tipo numerico con i decimali (può avere cifre dopo la virgola), occupa 8 byte di memoria e va da -1.7976931348623157E308 a 1.7976931348623157E308
		// float - è un dato di tipo numerico con i decimali, è un pochino meno preciso del double e molto meno usato (può avere cifre dopo la virgola), occupa 4 byte di memoria e va da -3.40282347E38 a 3.40282347E38
		// char - è un dato di tipo carattere, occupa 2 byte di memoria e può contenere un carattere (es. 'a', 'b', '1', '@', etc.)
		// boolean - è un dato di tipo logico, occupa 1 byte di memoria e può essere true o false
		
		// DATI DI RIFERIMENTO o OGGETTI:
		// String - è un dato di tipo stringa, occupa 2 byte di memoria per ogni carattere e può contenere una sequenza di caratterim dei testi (es. "Ciao", "123", "@@@@", etc.)
		// e poi ce ne sono altri ma li vedremo...



////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/ per creare una variabile dobbiamo dichiararla:
		// dobbiamo indicare il tipo di dati (int, double, ecc...) e poi il nome che abbiamo scelto
		// esempio:
		
		int a; // dichiaro una variabile di tipo int chiamata a
		// oppure
		
		double b; // dichiaro una variabile di tipo double chiamata b
		
		// ora che abbiamo dichiarato le nostre variabili possiamo inizializzarle o dare loro un primo valore
		// l'assegnazione di valori a una variabile primaria si fa con l'operatore = ("uguale" o "assegno")
		
		a = 5; // assegno il valore 5 alla variabile a
		// o
		b = 3.14; // assegno il valore 3.14 alla variabile b
		// ATTENZIONE: sebbene il sisema internazine (IL SI) preveda che per separare la parte intera
		// da quella decimale si usi la virgola (,) in Java si usa il punto (.).
		// In pratica usiamo la notazione decimale anglosassone.
		// b=3,14  // non è corretto in Java e darà errore di compilazione.
		// b=3.14 // è corretto in Java e non darà errore di compilazione.
		// questo se parliamo di come si indica la "virgola decimale" nel programma.
		// Il programma però può anche prevedere che nel momento in cui l'utente
		// inserisce un numero possa usare la classica virgola decimale.
		// In tal caso, sarà poi il programma a convertire la virgola in punto.


// Java differisce da JavaScript nell'uso delle variabile per diversi motivi...
		// per esempio in JavaScript non è necessario dichiarare il tipo di variabile
		// e la stessa variabile può essere riutilizzata per altri tipi
		// sul momento la uso per un valore intero, un attimo dopo posso usarla per un testo


// In java una volta fissato che quella variabile è per un certo tipo di dati
		// fino a che quella variabile esiste, potrà essere usata solo per quel tipo di dati
////////////////////////////////////////////////////////////////////////////////////////////////////////////////





public class App {

	public static void main(String[] args) {
		
		// In java sia oggetti che classi possono contenere metodi, ossia funzioni o comandi
		// richiamabili
		
		// Le classi sono pezzi di codice, o pezzi di programma, che possono essere utilizzati
		// sono raccoglitori di comandi e funzioni
		// ad esempio la classe System contiene una serie di comandi per gestire l'input e l'output
		
		System.out.println(); // serve a scrivere a video, sulla console
		
		// Possiamo passargli testi o numeri, dati o variabili che contengono sta roba
		
		System.out.println("Ciao, sono un programma Java"); // stampa a video il testo
		// ricorda che ad ogni fine riga di un comando java serve il "punto e virgola" ";"
		// questo salvo casi eccezionali, che vedremo
		
		System.out.println(5); // stampa a video il numero 5
		System.out.println(5 + 5); // stampa a video il risultato di un'operazione
		// ad esempio la somma di 5 + 5
		
		System.out.println(5 + 5 + 5); // stampa a video il risultato di un'operazione
		
		int x = 5; // dichiara una variabile di nome x e gli assegna il valore 5
		
		System.out.println(x); // stampa a video il valore della variabile x
		
		String nome = "Mario"; // dichiara una variabile di nome nome e gli assegna il valore Mario
		System.out.println(nome); // stampa a video il valore della variabile nome
		

	}

}





// I nomi delle varibili:
		// Non possono contenere spazi, punti, virgole, simboli speciali, accenti, apostrogi, virgolette
		
		// RINUNCIATE AD AVERE CREATIVITA' NELLO SCEGLIERE I NOMI DELLE VARIABILI



NON POSSONO ESISTERE 2 variabili con lo stesso nome
E non si può iniziare un nome di variabile con un numero
////////////////////////////////////////////////////////////////////////////////////////////////////////////////




// quando un metodo/funzione può essere eseguito, richiamato
		// direttamente a partire dalla sua CLASSE
		// senza dover dichiarare e instanziare una variabile oggetto da quella classe
		//.... allora si dice che quel metodo è STATICO
		//... metodi/funzioni che possono essere richiamati SOLO dall'interno di variabili/oggetto
		//creati a partire da una classe, sono metodi DINAMICI




// Perchè stiamo dicendo tutto questo?
		// perchè impareremo a:
		// Usare delle classi di JAVA
		// Usare dei metodi/funzione che si possono usare solo 
		// istanziando una variabile a partire da quella classe
		
		// impareremo anche a usare alcuni metodi statici che si possono usare
		// anche direttamente solo dal nome della classe...
		
		// impareremo a creare DELLE NOSTRE classi
		// e a creare dei metodi che saranno dinamici e quindi si troveranno e si potranno usare
		// da dentro le variabili oggetto che creeremo con le nostre classi.
		
		// impareremo, poi, a creare anche dei metodi statici
		// che potremo chiamare direttamente dall classe
		
		// impareremo, poi, l'utilità di fare una o l'altra cosa...


// Qualunque programma serio ha bisogno di un INPUT
		// cioè serve che dei dati vengano introdotti nel programma dall'esterno
		// magari leggendo i dati da un file, leggendo i dati da un server
		// leggendo i dati da tastiera (che vuol dire che li inserisce l'utente che usa il programma)
		
		// Noi ora impareremo l'input da tastiera
		
		// In pratica significa che impariamo a realizzare dei programmi
		// che saranno in grado di chiedere all'utente di inserire dei dati
		// questo li inserirà da tastiera e questi dati finiranno dentro delle variabili del programma
		// e dopo il nostro programma le potrà usare...




// ci sono molti modi per acquisire dei dati da tastiera...
		// però in generale, serve avere la possibilità di
		
		// BLOCCARE Il flusso del programma (il programma si ferma)
		// e attende che la persona, l'utente, inserisca qualcosa digitando su tastiera
		
		// l'utente preme INVIO
		
		// quello che ha inserito da tastiera viene acquisito dal programma
		// e viene memorizzato in una variabile
		
		// poi il programma va avanti


// per fare questo useremo una classe per l'Input.
		// La classe Scanner
		// Scanner è una classe e quindi ci può permettere di creare
		// un oggetto, una variabile oggetto (o variabile per riferimento).
		
	    // Creiamo la variabile oggetto che ci servirà per richiedere l'inserimento
		// di un INPUT Dati da tastiera.
		
		// Scegliamo un nome per la variabile oggetto.
		// DATO che servirà ad acquisire un input da tastiera
		// SUGGERERIREI un nome che ci ricordi a che cosa serve
		// magari input o tastiera... oppure potremmo chiamarla scanner.
		// Attenzione so che scanner sembra il nome della classe, ma questa si chiama
		// Scanne (con la S  maiuscola). JAVA è case sensitive, quindi per lui maiuscole e minuscole
		// fanno differenza. Sono lettere diverse.
		// Scanner e scanner sono due parole diverse.
		// Scanner è il nome della classe
		// quindi potremmo anche chiamarla scanner
		// oppure possiamo preferire scannerInput o inputScanner
		// o come abbiamo detto prima input o tastiera.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////


java.util.Scanner input;
		
		// ecco la abbiamo creata.
		// Oserviamo che non abbiamo scritto
		// Scanner input;
		// ma 
		// java.util.Scanner input;
		
		// questo perchè le classi sono taaaaaante ma taaaaaaaante
		// e per una questione di ordine sono raccolte in una specie di cartelline chiamate package.
		// i nomi di queste "cartelline" si scrivono separate dal "." invece che da / o \ 
		// possono anche esiste (ed esistono) classi con lo stesso nome. 
		// Ma se ci sono devono essere in package diversi.
		
		// quindi possono anche esistere due Scanner 
		// Ma in package diversi.
		
		// JAVA ci mette a disposizioen una quantità enoooorme di classi pronte da usare
		// Ma ce le sistema in dei package.
		
		// Se vogliamo dichiarare una variabile di tipo Scanner
		// dobbiamo dirgli anche in che package è.
		
		// possiamo fare in due modi:
		
		// 1) scrivere il nome completo della classe ogni volta che la usiamo
		// 2) dire a java che vogliamo usare il package java.util e tutte le sue classi o comunque quella classe





////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Scanner input;
		// ok, però, a differenza delle variabili primare, come int, double e simili...
		// Scanner è una CLASSE e non un tipo primitivo...
		// Ed è una di quelle che non ha l'istanziamento implicito...
		// Cosa vuol dire?
		// Significa che deve essere ISTANZIATA
		
		// infatti è come se, scrivendo Scanner input; avessi solo "prenotato" il nome input per essere
		// un oggetto Scanner
		// ma un oggetto Scanner in realtà occupa una certa MEMORIA
		// Memoria che ancora non è stata allocata (cioè messa da parte per questa variabile)
		// Per allocarla, devo usare il costruttore in new che vuol dire "nuovo" (producine uno nuovo)...
		// new seguito dal nome della classe che devo  istanziare
		// new Scanner();
		// Poi, come per alcuni altri oggetti (non tutti) serve di indicare la configurazione...
		// Infatti quando facciamo new NOMECLASSE() oltre ad allocare memoria
		// Stiamo anche invocando una cosa che si chiama COSTRUTTORE
		// che è un metodo che prepara anche l'oggetto per essere usato, non si limita a allocare memoria
		// e talvolta questo metodo richiede dei parametri
		
		// nel caso di Scanner li richiede perchè la classe Scanner può creare degli oggetti Scanner
		// per più cose... oggetti che a seconda di come vengono organizzati possono 
		// leggere da tastiera (che è ciò che vogliamo fare noi) o da file o da rete  o altro..
		// quindi nel costruttore new Scanner() dobbiamo inserire un parametro che indica
		// che ci serve per l'input da tastiera.
		// CHI ha creato questa classe l'ha pensata in modo che il parametro che dobbiamo passare
		// è un oggetto. L'oggetto che ci serve è System.in
		// QUesto oggetto farà capire alla classe Scanner che noi vogliamo leggere da tastiera
		// e questa predisporrà l'oggetto per questo scopo
		
		// Quindi la riga di codice che ci serve è:
		
		input = new Scanner(System.in);
		
		// Avremmo potuto farlo anche su una sola riga
		// Scanner input = new Scanner(System.in);
		
		// anche le altre variabili, quelle primarie si possono inizializzare in questo modo
		// int numero = 0;
		// double prezzo = 5.5;

Scanner input = new Scanner(System.in); // ora è pronta per leggere da tastiera!
		System.out.println("Inserisci il tuo nome: ");
		String nome; // creo una variabile di tipo String, per contenere il nome che verrà inserito
		
		nome = input.nextLine(); // metterà il pc in attesa dell'inserimento e quando verrà premuto INVIO restituirà il dato
		System.out.println("Ciao " + nome + "!"); // stampo il messaggio di saluto

////////////////////////////////////////////////////////////////////////////////////////////////////////////////




// con il metodo nextLine() leggo una riga di testo     
		// quello che ottengo è una stringa
		// servirà una variabile stringa
		
		// SE PERO voglio leggere un numero e farlo finire dentro una variabile di tipo int
		// devo usare il metodo nextInt() o nextLine() recuperando una stringa e poi convertire la stringa in int
		
		// Occhio che nextInt() non legge gli spazi, ma soprattutto lascia sporca la memoria della tastiera...
		// si dice in termine tecnico che lascia il buffer sporco
		// e per pulirlo bisogna usare nextLine() subito dopo. Visivamente non si vedrà capitare nulla
		// ma serve a pulire il buffer. Se non si fa, nel caso usassimo un nextLine successivamente
		// per leggere la tastiera non funzionerà.

		// In pratica il primo nextLine() dopo nextInt() non funziona!
		// QUINDI se non c'è nessun nextLine() dopo nextInt() non c'è problema
		// ma se ci serve di usare un nextLine() dopo un nextInt() dobbiamo pulire il buffer
		// e allora, dato che il primo nextLine() non funziona, lo facciamo subito dopo il nextInt()




import java.util.Scanner;

public class App {

	public static void main(String[] args) {
		
		Scanner scanner = new Scanner(System.in);
		
		String nome;
		int anni;
		String professione;
		
		System.out.println("Inserisci il tuo nome:");
		nome = scanner.nextLine();
		
		System.out.println("Inserisci la tua età:");
		anni = scanner.nextInt();
		scanner.nextLine(); // Così pulisce il buffer
		
		System.out.println("Inserisci la tua professione:");
		professione = scanner.nextLine();
		
		
		System.out.println("RIEPILOGO:");
		System.out.println("Nome: " + nome);
		System.out.println("Età: " + anni);
		System.out.println("Professione: " + professione);
		
	}

}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////




// Tra le variabli primarie ci sono le variabili booleane
		
		boolean x = true;
		// oppure
		
		boolean y = false;
		
		// le variabili booleane possono essere solo true o false
		// sono sinonimi di vero e falso o 1 e 0
		
		// sono anche il risultato di operazioni logiche
		
		boolean a = 5>7; // a è false
		boolean b = 5<7; // b è true
		boolean c = 5==7; // c è false    == non = perchè = è usato per assegnare un valore
		boolean d = 5!=7; // d è true     != è diverso da
		
		System.out.println("a: " + a);
		System.out.println("b: " + b);
		System.out.println("c: " + c);
		System.out.println("d: " + d);


////////////////////////////////////////////////////////////////////////////////////////////////////////////////


boolean x = true;
		boolean y = !x; // y = inverso di x quindi y = false
		
		System.out.println("x = " + x);
		System.out.println("y = " + y);




////////////////////////////////////////////////////////////////////////////////////////////////////////////////



boolean x = true;
		boolean y = !x; // y = inverso di x quindi y = false
		
		System.out.println("x = " + x);
		System.out.println("y = " + y);
		
		// ! è detto NOT inverte il valore di una variabile booleana
		// Se è true diventa false e viceversa




// operatore condizionale if
		/*
		  if (condizione) {
		              // codice da eseguire se la condizione è vera
		  }
		  
		  if serve a eseguire un blocco di codice se una condizione è vera.
		 
		 */

////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////